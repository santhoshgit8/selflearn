def COLOR_MAP = [
    'SUCCESS': 'good', 
    'FAILURE': 'danger',
]
pipeline{
    agent any
    tools{
        maven "maven3"
        jdk "jdk8"
    }
      environment {
        registryCredential = 'ecr:us-west-2:awstoken'
        appRegistry = "376314486434.dkr.ecr.us-west-2.amazonaws.com/vprofile"
        vprofileRegistry = "376314486434.dkr.ecr.us-west-2.amazonaws.com"
    }
    stages{
        stage("fetching the code"){
            steps{
            git branch: 'docker', url: 'https://github.com/santhoshgit8/vprofile-project.git'
        }
    }
  
    stage("unit testing"){
        steps{
           sh "mvn test"
     }
    }
    stage("checkstyle conde analysis"){
        steps{
            sh "mvn checkstyle:checkstyle"
        }
    }
    stage('Sonar Analysis') {
        environment {
            scannerHome = tool 'sonar4.7'
        }
        steps {
           withSonarQubeEnv('sonar') {
               sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
               -Dsonar.projectName=vprofile \
               -Dsonar.projectVersion=1.0 \
               -Dsonar.sources=src/ \
               -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
               -Dsonar.junit.reportsPath=target/surefire-reports/ \
               -Dsonar.jacoco.reportsPath=target/jacoco.exec \
               -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
          }
        }
    }
    stage("Quality Gate") {
        steps {
            timeout(time: 1, unit: 'HOURS') {
                // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                // true = set pipeline to UNSTABLE, false = don't
                waitForQualityGate abortPipeline: true
            }
        }
    }
     stage('Build App Image') {
       steps {
       
         script {
                dockerImage = docker.build( appRegistry + ":$BUILD_NUMBER", "./Docker-files/app/multistage/")
             }

     }
    
    }

       stage('Upload App Image') {
          steps{
            script {
              docker.withRegistry( vprofileRegistry, registryCredential ) {
                dockerImage.push("$BUILD_NUMBER")
                dockerImage.push('latest')
              }
            }
          }
     }


        }
    }
